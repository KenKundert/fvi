#!/usr/bin/env python3

"""
fvi

Searches through a list of files to find a string, and then sequentially opens
each file that contains that string in vim.

Usage:
    fvi [options] <pattern> [<file>...]

Options:
    -e, --exclude [glob]  a glob string used to filter out unwanted files.
    -w, --word            match a word
    -i, --ignore-case     ignore case
    -l, --literal         search pattern is a literal string rather than a regex
    -m, --magic           treat a pattern as a vim magic or grep basic regular
                          expression
    -v, --very-magic      treat a pattern as a vim very magic or grep extended
                          regular expression
    -g, --gvim            open files in gvim rather than vim
    -b, --binary          do not skip binary files (those that cannot be decoded as utf-8)
    -W, --warn            do not suppress warnings about directories and binary files
    -h, --help            show help message and exit

Vim will open the first file that contains the pattern and place the cursor on
the first occurrence. Use n to go to the next occurrence and ctrl-n to go to the
next file. Autowrite is set by default, so any changes you make are
automatically written out before moving to the next file. Run 'man fvi' for more
information.

~/.config/fvi/settings.nt is read if it exists and can be used the change the 
programs used for vim, gvim, grep, and ag.
"""
__version__ = '1.4.4'
__released__ = '2023-01-06'
version = f"{__version__} ({__released__})"


# License {{{1
# Copyright (C) 2013-2023 Kenneth S. Kundert
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see http://www.gnu.org/licenses/.


try:
    # Imports {{{1
    from appdirs import user_config_dir
    from docopt import docopt
    from fnmatch import fnmatch
    from inform import (
        Error, codicil, cull, display, os_error, plural, terminate, warn
    )
    from shlib import Run, set_prefs, to_path
    import nestedtext as nt
    import codecs
    import re
    import os
    set_prefs(use_inform=True)

    # Utilities {{{1
    # eliminate duplicate files {{{2
    def eliminate_duplicates(files):
        seen = set()
        todo = []
        ignore = []
        for fn in files:
            try:
                nfo = os.stat(fn)
                if nfo.st_ino in seen:
                    ignore.append(fn)
                else:
                    seen.add(nfo.st_ino)
                    todo.append(fn)
            except OSError as e:
                warn(os_error(e), 'Skipping ...')
                ignore.append(fn)
        if ignore:
            display('Ignoring duplicate files:\n    %s' %  '\n    '.join(ignore))
        return todo

    # Read the settings {{{1
    settings_file = to_path(user_config_dir("fvi"), "settings.nt")
    settings = {}
    try:
        settings = nt.load(settings_file, 'dict')
    except FileNotFoundError:
        pass
    except nt.NestedTextError as e:
        e.report()
    except OSError as e:
        warn(os_error(e))
    vim = settings.get('vim', 'vim').split()
    gvim = settings.get('gvim', 'gvim').split()
    grep = settings.get('grep', 'grep').split()
    ag = settings.get('ag', '').split()

    # Read the command line {{{1
    cmdline = docopt(__doc__, version=version)
    warn.output = cmdline['--warn']

    # Initialization {{{1
    vim_flags = ['aw', 'nofen']  # enable autowrite and disable folds in vim
    grep_flags = ['--files-with-matches']
    use_grep = False
    re_flags = 0
    cmd = None

    # Process the command line {{{1
    pattern = cmdline['<pattern>']
    re_pattern = re.escape(pattern)
    if cmdline['--word']:
        grep_flags += ['--word-regexp']
        vim_pattern_prefix = r'\<'
        vim_pattern_suffix = r'\m\>'
        re_pattern = r'\b' + pattern + r'\b'
    else:
        vim_pattern_prefix = ''
        vim_pattern_suffix = ''
    if cmdline['--ignore-case']:
        grep_flags += ['--ignore-case']
        ag_case_sensitivity = '--ignore-case'
        re_flags += re.IGNORECASE
        vim_pattern_prefix += r'\c'
    else:
        ag_case_sensitivity = '--case-sensitive'
    if cmdline['--very-magic']:
        use_grep = True
        grep_flags += ['--extended-regexp']
        vim_pattern_prefix += r'\v'
    elif cmdline['--magic']:
        use_grep = True
        grep_flags += ['--basic-regexp']
        vim_pattern_prefix += r'\m'
    elif cmdline['--literal']:
        use_grep = True
        grep_flags += ['--fixed-string']
        vim_pattern_prefix += r'\M'
    else:
        vim_pattern_prefix += '\V'
    editor = gvim if cmdline['--gvim'] else vim
    exclude = cmdline['--exclude']

    # Find files to edit {{{1
    if cmdline['<file>']:
        # User has given a list of files.
        # Try to open each and eliminate if it is undesirable (is a directory,
        # is unreadable, or is a binary file).
        # Then, if doing a non-magic search, also filter out any files that do
        # not contain the search string.
        # If doing a magic search, build the command line for grep that will be
        # used to filter out files that do not contain the search pattern.
        files = []
        regex = re.compile(re_pattern, re_flags)
        eh = 'ignore' if cmdline['--binary'] else 'strict'
        for each in cmdline['<file>']:
            try:
                with codecs.open(each, 'r', 'utf-8', eh) as f:
                    contents = f.read()
                    if use_grep or regex.search(contents, re_flags):
                        files += [each]
            except OSError as e:
                warn(os_error(e), 'Skipping ...')
            except UnicodeDecodeError as e:
                warn("is a binary file, skipping ...", culprit=each)
                codicil(str(e))
                begin = max(e.start-25, 0)
                codicil('    ', e.object[begin:e.end+25])
                codicil('    ', (2+e.start-begin)*' ' + (e.end-e.start)*'^')
        if use_grep:
            cmd = grep + grep_flags + ['--regexp', pattern] + files
    else:
        # The user gave us no files to search, so use ag to find them
        if not ag:
            raise Error('ag is not available, so you must specify files to search.')

        ag_flags = [
            each
            for each in grep_flags
            if each not in ['--basic-regexp', '--extended-regexp']
        ]
        if set(ag_flags) != set(grep_flags):
            warn(f"{ag[0]} does not support the magic flags, ignored.")
        cmd = ag + ['--follow', ag_case_sensitivity] + ag_flags + [pattern]

    # Run either grep to filter out any files that do not contain the search
    # pattern or ag to find any files that contain the pattern.
    if cmd:
        try:
            searcher = Run(cmd, modes='sOEW1')
            files = searcher.stdout.strip().split('\n')

        except Error as e:
            e.terminate()

    # process exclude glob pattern
    if exclude:
        files = [
            each
            for each in files
            if not fnmatch(each.split('/')[-1], exclude)
        ]

    # Exit if there are no files {{{1
    if not cull(files):
        count = len(cmdline['<file>'])
        display(
            'None of the {:# file/s} searched contain the pattern.'.format(
                plural(count)
            )
        )
        terminate()

    # Edit the files {{{1
    files = eliminate_duplicates(files)
    assert files
    vim_options = 'set %s' % ' '.join(vim_flags)
    # Configure ctrl-N to move to first occurrence of search string in next file   
    # while suppressing the annoying 'press enter' message and echoing the
    # name of the new file so you know where you are.
    next_file_map = 'map <C-N> :silent next +//<CR> :file<CR>'
    search_pattern = 'silent /%s' % (
        vim_pattern_prefix + pattern + vim_pattern_suffix
    )
    cmd = (
        editor
        + ['+%s' % '|'.join([vim_options, next_file_map, search_pattern])]
        + files
    )
    vim = Run(cmd, modes='soEW*')
    terminate(vim.status)

except KeyboardInterrupt:
    display('Killed by user.')
    terminate(0)
except Error as e:
    e.terminate()

# vim: set sw=4 sts=4 et:
